// Code generated by gen; DO NOT EDIT.

package main

import (
	"github.com/khirono/go-peg"
)

func NewGrammar() peg.Expr {
	IPv6address := peg.NewRule("IPv6address")
	h16 := peg.NewRule("h16")
	ls32 := peg.NewRule("ls32")
	IPv4address := peg.NewRule("IPv4address")
	decOctet := peg.NewRule("decOctet")
	DIGIT := peg.NewRule("DIGIT")
	HEXDIG := peg.NewRule("HEXDIG")

	IPv6address.Define(
		peg.NewChoice(
			peg.NewSequence(
				peg.NewRepeat(
					peg.NewSequence(
						h16,
						peg.NewLiteral(
							":",
						),
					),
					peg.NewLimit(6, 6),
				),
				ls32,
			),
			peg.NewSequence(
				peg.NewLiteral(
					"::",
				),
				peg.NewRepeat(
					peg.NewSequence(
						h16,
						peg.NewLiteral(
							":",
						),
					),
					peg.NewLimit(5, 5),
				),
				ls32,
			),
			peg.NewSequence(
				peg.NewOptional(
					h16,
				),
				peg.NewLiteral(
					"::",
				),
				peg.NewRepeat(
					peg.NewSequence(
						h16,
						peg.NewLiteral(
							":",
						),
					),
					peg.NewLimit(4, 4),
				),
				ls32,
			),
			peg.NewSequence(
				peg.NewOptional(
					peg.NewSequence(
						peg.NewRepeat(
							peg.NewSequence(
								h16,
								peg.NewLiteral(
									":",
								),
							),
							peg.NewLimitUpper(1),
						),
						h16,
					),
				),
				peg.NewLiteral(
					"::",
				),
				peg.NewRepeat(
					peg.NewSequence(
						h16,
						peg.NewLiteral(
							":",
						),
					),
					peg.NewLimit(3, 3),
				),
				ls32,
			),
			peg.NewSequence(
				peg.NewOptional(
					peg.NewSequence(
						peg.NewRepeat(
							peg.NewSequence(
								h16,
								peg.NewLiteral(
									":",
								),
							),
							peg.NewLimitUpper(2),
						),
						h16,
					),
				),
				peg.NewLiteral(
					"::",
				),
				peg.NewRepeat(
					peg.NewSequence(
						h16,
						peg.NewLiteral(
							":",
						),
					),
					peg.NewLimit(2, 2),
				),
				ls32,
			),
			peg.NewSequence(
				peg.NewOptional(
					peg.NewSequence(
						peg.NewRepeat(
							peg.NewSequence(
								h16,
								peg.NewLiteral(
									":",
								),
							),
							peg.NewLimitUpper(3),
						),
						h16,
					),
				),
				peg.NewLiteral(
					"::",
				),
				h16,
				peg.NewLiteral(
					":",
				),
				ls32,
			),
			peg.NewSequence(
				peg.NewOptional(
					peg.NewSequence(
						peg.NewRepeat(
							peg.NewSequence(
								h16,
								peg.NewLiteral(
									":",
								),
							),
							peg.NewLimitUpper(4),
						),
						h16,
					),
				),
				peg.NewLiteral(
					"::",
				),
				ls32,
			),
			peg.NewSequence(
				peg.NewOptional(
					peg.NewSequence(
						peg.NewRepeat(
							peg.NewSequence(
								h16,
								peg.NewLiteral(
									":",
								),
							),
							peg.NewLimitUpper(5),
						),
						h16,
					),
				),
				peg.NewLiteral(
					"::",
				),
				h16,
			),
			peg.NewSequence(
				peg.NewOptional(
					peg.NewSequence(
						peg.NewRepeat(
							peg.NewSequence(
								h16,
								peg.NewLiteral(
									":",
								),
							),
							peg.NewLimitUpper(6),
						),
						h16,
					),
				),
				peg.NewLiteral(
					"::",
				),
			),
		),
	)
	h16.Define(
		peg.NewSequence(
			peg.NewRepeat(
				HEXDIG,
				peg.NewLimit(1, 4),
			),
			peg.NewNot(
				peg.NewLiteral(
					".",
				),
			),
		),
	)
	ls32.Define(
		peg.NewChoice(
			peg.NewSequence(
				h16,
				peg.NewLiteral(
					":",
				),
				h16,
			),
			IPv4address,
		),
	)
	IPv4address.Define(
		peg.NewSequence(
			decOctet,
			peg.NewLiteral(
				".",
			),
			decOctet,
			peg.NewLiteral(
				".",
			),
			decOctet,
			peg.NewLiteral(
				".",
			),
			decOctet,
		),
	)
	decOctet.Define(
		peg.NewChoice(
			peg.NewSequence(
				peg.NewLiteral(
					"25",
				),
				peg.NewCharclass(
					peg.RuneRange{48, 53},
				),
			),
			peg.NewSequence(
				peg.NewLiteral(
					"2",
				),
				peg.NewCharclass(
					peg.RuneRange{48, 52},
				),
				DIGIT,
			),
			peg.NewSequence(
				peg.NewLiteral(
					"1",
				),
				peg.NewRepeat(
					DIGIT,
					peg.NewLimit(2, 2),
				),
			),
			peg.NewSequence(
				peg.NewCharclass(
					peg.RuneRange{49, 57},
				),
				DIGIT,
			),
			DIGIT,
		),
	)
	DIGIT.Define(
		peg.NewCharclass(
			peg.RuneRange{48, 57},
		),
	)
	HEXDIG.Define(
		peg.NewCharclass(
			peg.RuneUnion{
				peg.RuneRange{48, 57},
				peg.RuneRange{97, 102},
				peg.RuneRange{65, 70},
			},
		),
	)
	return IPv6address
}
